#A
library(mvtnorm)
library(Matrix)
n<-5000
mu<-c(0,0)
sig<-matrix(c(1,0,0,1),nrow=2,ncol=2)
zi<-rmvnorm(n,mu,sig)
#B
mat_z <- matrix(data=c(rnorm(n,0,1),rnorm(n,0,1)),nrow=2,ncol=n,byrow=TRUE)
rownames(mat_z) <- c("z1","z2")
A<-matrix(c(2,1.5,1.5,2),nrow=2,ncol=2)
eg<- eigen(A)
A<-eg$vectors%*%diag(sqrt(eg$values))
#C
x<-A%*%mat_z+c(1,2)
x<-t(x)
xdata<-as.data.frame(x)
sample_average<-colMeans(x)
variance_mat<-cov(x)
#Yes,The results of "sample_average" and "variance_mat" are close to the reality.
hist(x[,1],breaks=300)
hist(x[,2],breaks=300)
#D
library(ggplot2)
ggplot(aes(x[,1],x[,2]),data=xdata)+geom_point()
library(ggplot2)
x<-data.frame(x)
ggplot(xdata,aes(x[,1],x[,2]))+stat_density_2d(aes(fill = ..level..), geom = "polygon",colour="white")
ggplot(xdata, aes(x[ ,1],x[,2]) )+geom_bin2d(bins = 90)+scale_fill_continuous(type = "viridis") +theme_bw()
#F
v1<- x[,1]+x[,2]
v2<- x[,1]-x[,2]
ggplot(data = xdata,aes( v1,v2))+geom_point()+scale_fill_continuous(type = "viridis")
#Question2:
setwd("C:/Users/USER1/Desktop")
xi<-read.table('exam.txt')
xi=xi[-1, ]
read.table("home-exam.txt")
xi <- read.table("home-exam.txt")
xi=xi[-1, ]
xi=matrix(as.numeric(xi))
summary(xi)
#A
theta0=median(xi)
n=length(xi)
deriv_f1=function(theta,xd){
2*sum((xd-theta) / (1+(xd-theta)^2))
}
# the first deriviative
deriv_f1(theta0,xd=xi)
deriv_f2=function(theta,xd){
2*sum(((xd-theta)^2-1)/(1+(xd-theta)^2)^2)
}
# the second deriviative
deriv_f2(theta0,xi)
theta=theta0
while(abs(deriv_f1(theta,xi))>10^(-4)){
theta=theta-deriv_f1(theta,xi)/deriv_f2(theta,xi)
}
# using Newtonâ€™s method to estimate of theta
theta_MLE=theta
loglik=function(theta,data=xi){
-length(data)*log(pi)-sum(log(1+(data-theta)^2))
}
sequence_f=seq(3,7,length=10^4)
vector_of_loglik=numeric()
for(i in 1:10^4){
vector_of_loglik[i]=loglik(theta=sequence_f[i])
}
plot(sequence_f,vector_of_loglik)
points(sequence_f[which.max(vector_of_loglik)],vector_of_loglik[which.max(vector_of_loglik)],col="red",pch=10)
#B
theta_vec=numeric()
for(i in 1:1000){
y=sample(xi,n,replace=TRUE)
med_y = median(y)
theta = med_y
while( abs( deriv_f1(theta,y))>10^(-3)) {
theta=theta-deriv_f1(theta,y)/deriv_f2(theta,y)
}
theta_vec[i]=theta
}
sd(theta_vec)
quantile(theta_vec,prob=c(0.025,0.975))
hist(theta_vec,breaks=200,freq=FALSE,main="THe histogram of theta",xlab="sampled theta",cex.main = 1)
xx<-c(7.16523478153752,5.66659652818595,4.47575534893755,4.84970857977856,15.2276296414708,-0.573093658844655,4.97980673868322,2.73969325233614,5.14683035133365,10.1221488713611,9.01656611721311,65.711819422978,5.52057043354834,6.30674880627702,8.67771771267678,5.2528503049587,3.50395623925858,4.24774012371174,11.4137624410312,-48.1722033880239,-0.376400642113356,5.76475359419462,-27.353313803102,4.09682042042852,5.03373747558625,3.8261660769812,4.43580895525249,4.22242932760446,4.44905425775097,4.98475525084258,3.6416524979406,3.81767927422987,-93.2141354888589,5.01103555428068,5.38206564752185,3.0296536606134,86.676038167071,3.76536864898752,7.26590572567999,4.63759338498908,-17.2259677581435,4.90903933854569,4.43042810097151,5.41519101700693,7.01553803666926,5.05370712380939,5.22896180532498,3.92429687923716,5.46452912130986,4.50524864464907,6.13119216629816,6.931011365041,5.70039361940988,6.12470771804837,6.66119827017415,-4.26865103703534,4.77160581324527,7.91297525486072,7.04882594451997,-98.2224152538262,6.22663920777969,5.77535246011091,-9.91868097075743,7.77803716672203,-10.1297033914588,4.56699263921898,8.56120643036614,2.28239965661689,5.6212927060249,5.42419784358529,5.3654428914847,3.89730116338776,3.93504254066386,4.38168766024675,3.00038017933155,4.81884527713388,4.45257297902316,-3.50516232920359,6.07365636649988,4.26195094225287,4.73753258557777,0.807607628402986,3.93740907315333,3.08283749617447,3.77379774203008,2.56562208889432,-19.6532587812275,8.00379422844706,5.27350155029373,5.17570743606727,6.49856446395129,-8.78462344722329,4.38775671122269,4.39685118092286,3.52571990926583,7.13834590807858,0.724655622024244,5.72807728660989,6.58172179467414,6.22426074825281
)
xi
xx[length(xx)]
xi==xx
all(xi==xx)
install.packages("markovchain")
library("markovchain")
q1 <- new("markovChain")
q1 <- new("markovchain")
?markovchain::markovchainFit
q1 <- new("markovchain",          )
library("markovchain")
q1 <- new("markovchain",          )
q1
P <- matrix(c(1,0,0,0,
0,0,0.5,0.5,
0.5,0.5,0,0,
0,0,0,1),
byrow = TRUE,nrow = 4)
q1 <- new("markovchain",
states = 1:4,
transitionMatrix = P)
P <- matrix(c(1,0,0,0,
0,0,0.5,0.5,
0.5,0.5,0,0,
0,0,0,1),
byrow = TRUE,nrow = 4)
q1 <- new("markovchain",
states = 1:4,
transitionMatrix = P)
q1 <- new("markovchain",
states = LETTERS[1:4],
transitionMatrix = P)
q1
absorbingStates(q1)
absorptionProbabilities(q1)
P2 <- matrix(c(0.2,0.3,0.4,0.1,0,0,
0,0.5,0.5,0,0,0,
0,0.3,0.1,0.5,0,0.1,
0,0,0,1,0,0,
0,0,0.7,0.3,0,0,
0,0,0,0,0,1),byrow = TRUE,nrow = 6)
q2 <- new("markovchain",
transitionMatrix = P2)
q2
q1 <- new("markovchain",
transitionMatrix = P1)
absorbingStates(q1)
absorptionProbabilities(q1)
library("markovchain")
P1 <- matrix(c(1,0,0,0,
0,0,0.5,0.5,
0.5,0.5,0,0,
0,0,0,1),
byrow = TRUE,nrow = 4)
q1 <- new("markovchain",
transitionMatrix = P1)
absorbingStates(q1)
absorptionProbabilities(q1)
P2 <- matrix(c(0.2,0.3,0.4,0.1,0,0,
0,0.5,0.5,0,0,0,
0,0.3,0.1,0.5,0,0.1,
0,0,0,1,0,0,
0,0,0.7,0.3,0,0,
0,0,0,0,0,1),byrow = TRUE,nrow = 6)
q2 <- new("markovchain",
transitionMatrix = P2)
markovchain::communicatingClasses(q2)
absorptionProbabilities(q2)
markovchain::plot(q2)
knitr::opts_chunk$set(echo = TRUE)
P1 <- matrix(c(1,0,0,0,
0,0,0.5,0.5,
0.5,0.5,0,0,
0,0,0,1),
byrow = TRUE,nrow = 4)
q1 <- new("markovchain",
transitionMatrix = P1)
absorbingStates(q1)
absorptionProbabilities(q1)
absorbingStates(q1)
absorptionProbabilities(q1)
histabrut_sfiga <- absorptionProbabilities(q1)
pander(histabrut_sfiga)
histabrut_sfiga <- absorptionProbabilities(q1)
P1 <- matrix(c(1,0,0,0,
0,0,0.5,0.5,
0.5,0.5,0,0,
0,0,0,1),
byrow = TRUE,nrow = 4)
q1 <- new("markovchain",
transitionMatrix = P1)
histabrut_sfiga <- absorptionProbabilities(q1)
pander(histabrut_sfiga)
library(markovchain)
library(pander) # nice tables
pander(histabrut_sfiga)
?pander(histabrut_sfiga,)
?pandoc.table(..)
pander(histabrut_sfiga,)
pander(histabrut_sfiga)
knitr::include_graphics("q1.jpg")
pander(histabrut_sfiga,
row.names=c("X0 = 2"))
pander(histabrut_sfiga,
row.names=c("X0 = 2","X0=3"))
pander(histabrut_sfiga,
row.names=c("X0 = 2","X0 = 3"))
pander(histabrut_sfiga,
row.names=c("X0 = 2","X0 = 3"),
col.names=c("Absorb in 1","Absorb in 4"))
P2 <- matrix(c(0.2,0.3,0.4,0.1,0,0,
0,0.5,0.5,0,0,0,
0,0.3,0.1,0.5,0,0.1,
0,0,0,1,0,0,
0,0,0.7,0.3,0,0,
0,0,0,0,0,1),byrow = TRUE,nrow = 6)
q2 <- new("markovchain",
transitionMatrix = P2)
markovchain::plot(q2)
markovchain::communicatingClasses(q2)
absorptionProbabilities(q2)
absorptionProbabilities(q2)
P <- matrix(c(0.9,0.1,0,0,0,0,
0,0.8,0.2,0,0,0,
0,0,0.5,0.5,0,0,
0,0,0,0,1,0,
0,0,0,0,0,1),byrow = T,nrow = 6)
q3 <- new("markovchain",
states = states,
transitionMatrix = P)
states <- c("new","low","high","fix1","fix2","fix3")
P <- matrix(c(0.9,0.1,0,0,0,0,
0,0.8,0.2,0,0,0,
0,0,0.5,0.5,0,0,
0,0,0,0,1,0,
0,0,0,0,0,1),byrow = T,nrow = 6)
q3 <- new("markovchain",
states = states,
transitionMatrix = P)
P
states <- c("new","low","high","fix1","fix2","fix3")
P <- matrix(c(0.9,0.1,0,0,0,0,
0,0.8,0.2,0,0,0,
0,0,0.5,0.5,0,0,
0,0,0,0,1,0,
0,0,0,0,0,1,
1,0,0,0,0,0),byrow = T,nrow = 6)
q3 <- new("markovchain",
states = states,
transitionMatrix = P)
states <- c("new","low","high","fix1","fix2","fix3")
P <- matrix(c(0.9,0.1,0,0,0,0,
0,0.8,0.2,0,0,0,
0,0,0.5,0.5,0,0,
0,0,0,0,1,0,
0,0,0,0,0,1,
1,0,0,0,0,0),byrow = T,nrow = 6)
q3 <- new("markovchain",
states = states,
transitionMatrix = P)
plot(q3)
is.irreducible(q1)
is.irreducible(q3)
q3^3
q3^3[1,1]
q3^3
str(q3^3)
(q3^3)@transitionMatrix
(q3^3)@transitionMatrix[1,1]
(after_3_steps)@transitionMatrix[1,1]
after_3_steps <- q3^3
(after_3_steps)@transitionMatrix[1,1]
Q <- matrix(c(-6,6,0,0,0,
3,-7.5,4.5,0,0,
0,6,0-9,3,0,
0,0,9,-10.5,1.5,
0,0,0,9,-9),byrow = T,nrow = 5)
mc <- new("ctmc")
install.packages("ctmc")
?markovchain
??markovchain
library(markovchain)
mc <- new("ctmc")
mc <- new("ctmc",generatorMatrix=Q)
mc
mc <- new("ctmc",generator=Q)
mc
steadyStates(mc)
adjm <- matrix(sample(0:1, 100, replace=TRUE, prob=c(0.9,0.1)), nc=10)
g1 <- graph_from_adjacency_matrix( adjm )
adjm <- matrix(sample(0:5, 100, replace=TRUE,
prob=c(0.9,0.02,0.02,0.02,0.02,0.02)), nc=10)
g2 <- graph_from_adjacency_matrix(adjm, weighted=TRUE)
library(igraph)
adjm <- matrix(sample(0:1, 100, replace=TRUE, prob=c(0.9,0.1)), nc=10)
g1 <- graph_from_adjacency_matrix( adjm )
adjm <- matrix(sample(0:5, 100, replace=TRUE,
prob=c(0.9,0.02,0.02,0.02,0.02,0.02)), nc=10)
g2 <- graph_from_adjacency_matrix(adjm, weighted=TRUE)
E(g2)$weight
g2
plot(g2)
?
erdos.renyi.game()
g <- erdos.renyi.game(1000, 1/1000)
degree_distribution(g)
g
g <- generate_graph(
fun_gen = igraph::barabasi.game,
param_gen = list(n = 100, m = 3, directed = FALSE),
seed = 1)
q2
states <- c("F","G","A","B")
transitionMatrix <- matrix(c(1,0,0,0,
0.1,0.8,0.1,0,
0.1,0.4,0.4,0.1,
0,0,0,1), byrow = T, nrow = 4)
q2 <- new("markovchain",
states=states,
transitionMatrix=transitionMatrix)
q2
absorptionProbabilities(q2)
library(markovchain)
absorptionProbabilities(q2)
q2^3
q2 <- new("markovchain",
states=states,
transitionMatrix=transitionMatrix,byrow=T)
q2
q2 <- new("markovchain",
states=states,
transitionMatrix=transitionMatrix,byrow=T)
q2
q2 <- new("markovchain",
states=states,
transitionMatrix=transitionMatrix)
q2
absorptionProbabilities(q2)
q2^3
q2
q2
plot(q2)
P <- matrix(c(1,0,0,0,
0.1,0.8,0.1,0,
0.1,0.4,0.4,0.1,
0,0,0,1), byrow = T, nrow = 4)
P
P %*% P
P %*% P %*% P
13/15
install.packages("shinydashboard")
library(shinydashboard)
.rs.restartR()
shiny::runApp('Stochastic')
runApp('Stochastic')
runApp('Stochastic')
runApp('Stochastic')
runApp('Stochastic')
shiny::runApp('Stochastic')
runApp('Stochastic')
runApp('Stochastic')
runApp('Stochastic')
runApp('Stochastic')
runApp('Stochastic')
runApp('Stochastic')
runApp('Stochastic')
runApp('Stochastic')
runApp('Stochastic')
runApp('Stochastic')
plot.new()
plot.new()
text("yo")
text(x=0,"yo")
text(x=c(0,0),"yo")
cost <- input$l1_price * sum(shortage*prop.table(table(shortage)))
runApp('Stochastic')
runApp('Stochastic')
runApp('Stochastic')
install.packages("gridExtra")
library(gridExtra)
tableGrob(DD)
DD
data.frame(prob,cost)
tableGrob(mtcars)
plot(tableGrob(mtcars))
runApp('Stochastic')
runApp('Stochastic')
tableGrob(tab)
runApp('Stochastic')
runApp('Stochastic')
ggplot2::qplot(table(rpois(10,1)))
ggplot2::qplot(table(rpois(10,1)))
install.packages("ggfortify")
as.data.frame(table(mtcars$am))
ggplot(as.data.frame(table(mtcars$am)))+aes(x=Var1,y=Freq)+geom_bar()
ggplot(as.data.frame(table(mtcars$am)))+aes(x=Var1,y=Freq)+geom_bar(stat = "identity")
ggplot(table(shortage))+aes(x=Var1,y=Freq) +geom_bar(stat = "identity")
runApp('Stochastic')
runApp('Stochastic')
d
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
source("functions.R")
library(shiny)
library(shinydashboard)
library(gridExtra)
library(ggplot2)
# Define UI for application that draws a histogram
ui <- dashboardPage(
# tags$div(HTML("
#               MathJax.Hub.Config({
#               tex2jax"))
header =     dashboardHeader(),
body = dashboardBody(
withMathJax(""),
fluidRow(
box(
h4("Input for Benny the fisherman"),
inputPanel(
numericInput(inputId = "l1_n",
label = "number of experiments",
min = 10,
max = 1e7,
step = 10,
value = 5000),
sliderInput(inputId = "l1_p",
label = "Probability of keeping fish",
min = 0,
max = 1,
step = 0.01,
value = 0.5),
sliderInput(inputId = "l1_lambda",
label = "\\(\\lambda \\)",
min = 1,
max = 1000,
step = 0.1,
value = 5),
sliderInput(inputId = "l1_mu",
label = "\\(\\mu \\)",
min = 1,
max = 100,
step = 1,
value = 5),
sliderInput(inputId = "l1_price",
label = "Price of fish",
min = 1,
max = 100,
step = 1,
value = 15)
),
plotOutput("l1_plot1"),
h4("Fish shortage distribution"),
plotOutput("l1_plot2"),
tableOutput("l1_table1"),
title = "Lesson 1 - simulation",width = 12)
),
fluidRow(
)
),
sidebar = dashboardSidebar(disable = TRUE),
title = "The stochastic models (2320) app"
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$l1_plot1 <- renderPlot(
PlotFish(n = input$l1_n,
lambda = input$l1_lambda,
p = input$l1_p)
)
output$l1_plot2 <- renderPlot({
fish_kept <- KeepFish(CatchFish(input$l1_n,input$l1_lambda),input$l1_p)
shortage <- FishShortage(fish_kept=fish_kept,mu = input$l1_mu)
prob <- mean(shortage>0)
values <- as.numeric(names(table(shortage)))
cost <- input$l1_price * sum(values*prop.table(table(shortage)))
tab <- data.frame(prob,cost)
par(mfrow=c(1,2))
ggplot(table(shortage))+aes(x=Var1,y=Freq) +geom_bar(stat = "identity")
tableGrob(tab)
}
)
output$l1_table1 <- renderTable({
fish_kept <- KeepFish(CatchFish(input$l1_n,input$l1_lambda),input$l1_p)
shortage <- FishShortage(fish_kept=fish_kept,mu = input$l1_mu)
prob <- mean(shortage>0)
values <- as.numeric(names(table(shortage)))
cost <- input$l1_price * sum(values*prop.table(table(shortage)))
data.frame(prob,cost)
})
}
# Run the application
shinyApp(ui = ui, server = server)
runApp('Stochastic')
runApp('Stochastic')
runApp('Stochastic')
fish_caught <- CatchFish(n = n,lambda = lambda)
n <- 100
lambda <- 10
fish_caught <- CatchFish(n = n,lambda = lambda)
n <- 100
lambda <- 10
p <- 0.5
fish_caught <- CatchFish(n = n,lambda = lambda)
fish_kept <- KeepFish(fish_caught,p=p)
shortage <- FishShortage(fish_kept,mu=5)
shortage
table(shortage)
tab_short <- table(shortage)
runApp('Stochastic')
as.data.frame(table(shortage))
runApp('Stochastic')
runApp('Stochastic')
?tableGrob
runApp('Stochastic')
runApp('Stochastic')
ttheme_default()
ttheme_default(base_size = 20)
runApp('Stochastic')
runApp('Stochastic')
